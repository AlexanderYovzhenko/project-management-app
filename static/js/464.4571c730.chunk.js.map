{"version":3,"file":"static/js/464.4571c730.chunk.js","mappings":"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","sources":["webpack://project-management-app/./src/pages/board-page/BoardPage.module.scss?d996","webpack://project-management-app/./src/components/task-modal/TaskModal.module.scss?c4e6","components/task-modal/TaskModal.tsx","webpack://project-management-app/./src/components/task/Task.module.scss?9241","webpack://project-management-app/./src/components/task-modal-change/TaskChangeModal.module.scss?e95e","constants/supportedImageFormat.ts","components/task-modal-change/TaskChangeModal.tsx","components/task/Task.tsx","webpack://project-management-app/./src/components/column/Column.module.scss?38a7","components/column/Column.tsx","pages/board-page/BoardPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"BoardPage_container__Wf1Wr\",\"title\":\"BoardPage_title__05KGE\",\"board\":\"BoardPage_board__xkMaT\",\"board__body\":\"BoardPage_board__body__-4V1n\",\"loader\":\"BoardPage_loader__XF8YB\",\"error\":\"BoardPage_error__6CePo\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"TaskModal_modal__XJkXw\",\"open\":\"TaskModal_open__p40UJ\",\"modal__content\":\"TaskModal_modal__content__D4UTj\",\"cross\":\"TaskModal_cross__PMwUA\",\"error\":\"TaskModal_error__+tPiu\",\"sub_btn\":\"TaskModal_sub_btn__3GrJ-\",\"loader\":\"TaskModal_loader__zrJKU\"};","import React, { FC } from 'react';\nimport styles from './TaskModal.module.scss';\nimport cn from 'classnames';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\nimport jwtDecode from 'jwt-decode';\nimport { addTask } from '../../api/tasks';\nimport { useTranslation } from 'react-i18next';\nimport cross from './../board-modal/assets/cross.svg';\nimport LoadingAnimation from '../loading-animation/LoadingAnimation';\n\ninterface IProps {\n  isOpenCreateTaskModal: boolean;\n  setIsOpenCreateTaskModal: (val: boolean) => void;\n  boardId: string;\n  columnId: string;\n}\n\ninterface IJwt {\n  userId: string;\n}\n\nconst TaskModal: FC<IProps> = ({\n  isOpenCreateTaskModal,\n  setIsOpenCreateTaskModal,\n  boardId,\n  columnId,\n}) => {\n  const dispatch = useAppDispatch();\n  const { tasks, isLoading } = useAppSelector((state) => state.tasks);\n  const { userId } = jwtDecode<IJwt>(localStorage.getItem('token') || '');\n  const { t } = useTranslation();\n\n  return (\n    <div\n      className={cn(styles.modal, { [styles.open]: isOpenCreateTaskModal })}\n      onClick={() => setIsOpenCreateTaskModal(false)}\n    >\n      <div className={styles.modal__content} onClick={(e) => e.stopPropagation()}>\n        <img\n          className={styles.cross}\n          src={cross}\n          alt=\"cross\"\n          onClick={() => setIsOpenCreateTaskModal(false)}\n        />\n        <Formik\n          initialValues={{ title: '', description: '' }}\n          onSubmit={({ title, description }, { resetForm }) => {\n            dispatch(\n              addTask({\n                boardId: boardId,\n                columnId: columnId,\n                values: {\n                  order: tasks[columnId].length + 1,\n                  title,\n                  description,\n                  userId,\n                },\n              })\n            );\n\n            resetForm();\n          }}\n          validationSchema={Yup.object().shape({\n            title: Yup.string()\n              .min(4, t('must_be_more_than_4_characters'))\n              .max(12, t('must_be_less_than_12_characters'))\n              .required(t('title_is_required')),\n            description: Yup.string()\n              .min(2, t('must_be_more_than_2_characters'))\n              .required(t('description_is_required')),\n          })}\n        >\n          {({ handleSubmit }) => {\n            return (\n              <Form className={styles.form} onSubmit={handleSubmit}>\n                <label htmlFor=\"title\">\n                  {t('title_task')}\n                  <Field id=\"title\" name=\"title\" />\n                  <div className={styles.error}>\n                    <ErrorMessage name=\"title\" />\n                  </div>\n                </label>\n                <label htmlFor=\"description\">\n                  {t('description_task')}\n                  <Field id=\"description\" name=\"description\" />\n                  <div className={styles.error}>\n                    <ErrorMessage name=\"description\" />\n                  </div>\n                </label>\n                <div className={styles.sub_btn}>\n                  <div className={styles.loader}>{isLoading && <LoadingAnimation />}</div>\n                  <button type=\"submit\" disabled={isLoading}>\n                    {t('create')}\n                  </button>\n                </div>\n              </Form>\n            );\n          }}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskModal;\n","// extracted by mini-css-extract-plugin\nexport default {\"task\":\"Task_task__gTFwg\",\"image-preview\":\"Task_image-preview__0Y-qs\",\"title\":\"Task_title__EpJaq\",\"description\":\"Task_description__UeFta\",\"taskHead\":\"Task_taskHead__J36cn\",\"hat\":\"Task_hat__cOXZA\",\"refactor-delete\":\"Task_refactor-delete__lgVjl\",\"delete\":\"Task_delete__Dkul8\",\"refactor\":\"Task_refactor__bv5SQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"TaskChangeModal_modal__fXbhn\",\"open\":\"TaskChangeModal_open__NB9lb\",\"modal__content\":\"TaskChangeModal_modal__content__L-ekj\",\"cross\":\"TaskChangeModal_cross__nNC-g\",\"error\":\"TaskChangeModal_error__R+jF7\",\"sub_btn\":\"TaskChangeModal_sub_btn__RJT41\",\"loader\":\"TaskChangeModal_loader__JQwKj\",\"text_area\":\"TaskChangeModal_text_area__2OPhD\",\"image\":\"TaskChangeModal_image__vLYvV\",\"file\":\"TaskChangeModal_file__gHLM+\"};","export const supportedImageFormat = ['image/jpeg', 'image/jpg', 'image/png'];\n","import React, { FC } from 'react';\nimport styles from './TaskChangeModal.module.scss';\nimport cn from 'classnames';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\nimport { updateTask } from '../../api/tasks';\nimport { ITask } from '../../models/ITask';\nimport { useTranslation } from 'react-i18next';\nimport { fileUpload } from '../../api/files';\nimport cross from './../board-modal/assets/cross.svg';\nimport { supportedImageFormat } from '../../constants/supportedImageFormat';\nimport LoadingAnimation from '../loading-animation/LoadingAnimation';\nimport upload from './assets/upload.png';\n\ninterface IProps {\n  task: ITask;\n  isOpenChangeTaskModal: boolean;\n  setIsOpenChangeTaskModal: (val: boolean) => void;\n  numberTask: number;\n}\n\nconst TaskChangeModal: FC<IProps> = ({\n  task,\n  isOpenChangeTaskModal,\n  setIsOpenChangeTaskModal,\n  numberTask,\n}) => {\n  const dispatch = useAppDispatch();\n  const { isLoading, urlImages } = useAppSelector((state) => state.tasks);\n  const { t } = useTranslation();\n  const hasImage = !!task.files?.length || false;\n  const urlImage = urlImages.find((el) => el.taskId === task.id)?.urlImage;\n\n  return (\n    <div\n      className={cn(styles.modal, { [styles.open]: isOpenChangeTaskModal })}\n      onClick={() => setIsOpenChangeTaskModal(false)}\n    >\n      <div className={styles.modal__content} onClick={(e) => e.stopPropagation()}>\n        <img\n          className={styles.cross}\n          src={cross}\n          alt=\"cross\"\n          onClick={() => setIsOpenChangeTaskModal(false)}\n        />\n        <h2>{`${t('task_number')} ${numberTask}`}</h2>\n        <Formik\n          initialValues={{\n            title: task.title,\n            description: task.description,\n            file: '' as '' | File,\n          }}\n          onSubmit={({ title, description, file }) => {\n            dispatch(\n              updateTask({\n                boardId: task.boardId,\n                columnId: task.columnId,\n                taskId: task.id,\n                data: {\n                  title: title,\n                  order: task.order,\n                  description: description,\n                  userId: task.userId,\n                  boardId: task.boardId,\n                  columnId: task.columnId,\n                },\n              })\n            );\n\n            if (file && !hasImage) {\n              dispatch(fileUpload({ taskId: task.id, file: file }));\n            }\n          }}\n          validationSchema={Yup.object().shape({\n            title: Yup.string()\n              .min(4, t('must_be_more_than_4_characters'))\n              .max(12, t('must_be_less_than_12_characters'))\n              .required(t('title_is_required')),\n            description: Yup.string()\n              .min(2, t('must_be_more_than_2_characters'))\n              .required(t('description_is_required')),\n            file: Yup.mixed()\n              .test('fileSize', t('error-image_size'), (img) => {\n                if (hasImage) {\n                  return true;\n                }\n                if (typeof img === 'object') {\n                  return img?.size <= 500000;\n                } else {\n                  return true;\n                }\n              })\n              .test('type', t('error-image_type'), (img) => {\n                if (hasImage) {\n                  return true;\n                }\n                if (typeof img === 'object') {\n                  return supportedImageFormat.includes(img?.type);\n                } else {\n                  return true;\n                }\n              }),\n          })}\n        >\n          {({ handleSubmit, setFieldValue, values }) => {\n            return (\n              <Form className={styles.form} onSubmit={handleSubmit}>\n                <label htmlFor=\"title\">\n                  {t('title_task')}\n                  <Field id=\"title\" name=\"title\" />\n                  <div className={styles.error}>\n                    <ErrorMessage name=\"title\" />\n                  </div>\n                </label>\n                <label htmlFor=\"description\">\n                  {t('description_task')}\n                  <Field\n                    as=\"textarea\"\n                    id=\"description\"\n                    name=\"description\"\n                    className={styles.text_area}\n                  />\n                  <div className={styles.error}>\n                    <ErrorMessage name=\"description\" />\n                  </div>\n                </label>\n                {!hasImage && (\n                  <label className={styles.file} htmlFor=\"file\">\n                    <div>{t('choose_image')}</div>\n                    <img width={50} src={upload} alt=\"upload\" />\n                    <input\n                      id=\"file\"\n                      type=\"file\"\n                      name=\"file\"\n                      onChange={(event: React.ChangeEvent) => {\n                        const target = event.target as HTMLInputElement;\n                        const file: File = (target.files as FileList)[0];\n                        setFieldValue('file', file);\n                      }}\n                    />\n                    {values.file && <p>{values.file.name}</p>}\n                    <div className={styles.error}>\n                      <ErrorMessage name=\"file\" />\n                    </div>\n                  </label>\n                )}\n                {urlImage && (\n                  <div className={styles.image}>\n                    <img src={urlImage} alt=\"image of task\" />\n                  </div>\n                )}\n                <div className={styles.sub_btn}>\n                  <div className={styles.loader}>{isLoading && <LoadingAnimation />}</div>\n                  <button type=\"submit\" disabled={isLoading}>\n                    {t('update')}\n                  </button>\n                </div>\n              </Form>\n            );\n          }}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskChangeModal;\n","import React, { FC, useEffect, useState } from 'react';\nimport styles from './Task.module.scss';\nimport { ITask } from '../../models/ITask';\nimport ConfirmModal from '../confirm-modal/ConfirmModal';\nimport TaskChangeModal from '../task-modal-change/TaskChangeModal';\nimport refactorIcon from './assets/pencil.png';\nimport deleteIcon from './assets/delete.png';\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\nimport { fileDownload } from '../../api/files';\nimport defaultImage from './assets/default-image.jpg';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { t } from 'i18next';\n\ninterface IProps {\n  task: ITask;\n  index: number;\n}\n\nconst Task: FC<IProps> = React.memo(({ task, index }) => {\n  const dispatch = useAppDispatch();\n  const { title, description, boardId, columnId, id: taskId } = task;\n  const { tasks: allTasks, isUpdateTask, urlImages } = useAppSelector((state) => state.tasks);\n  const tasks = allTasks[columnId];\n  const urlImage = urlImages.find((el) => el.taskId === task.id)?.urlImage || defaultImage;\n\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [isOpenChangeTaskModal, setIsOpenChangeTaskModal] = useState(false);\n  const hasImage = !!task.files?.length || false;\n\n  useEffect(() => {\n    setIsOpenChangeTaskModal(false);\n  }, [isUpdateTask]);\n\n  useEffect(() => {\n    if (hasImage) {\n      dispatch(fileDownload({ taskId: task.id, fileName: task.files[0].filename }));\n    }\n  }, [hasImage]);\n\n  return (\n    <Draggable draggableId={task.id as string} index={index}>\n      {(provided) => {\n        return (\n          <div className={styles.task} {...provided.draggableProps} ref={provided.innerRef}>\n            <div className={styles.taskHead} {...provided.dragHandleProps}>\n              <div className={styles.hat}>\n                <h3 className={styles.title}>{`${index + 1}) ${title}`}</h3>\n\n                <div className={styles['refactor-delete']}>\n                  <div\n                    className={styles.refactor}\n                    title={t('edit')}\n                    onClick={() => setIsOpenChangeTaskModal(true)}\n                  >\n                    <img width={26} src={refactorIcon} alt=\"refactor icon\" />\n                  </div>\n                  <div\n                    className={styles.delete}\n                    title={t('delete')}\n                    onClick={() => setIsOpenModal(true)}\n                  >\n                    <img width={30} src={deleteIcon} alt=\"delete icon\" />\n                  </div>\n                </div>\n              </div>\n              <div className={styles['image-preview']}>\n                <img src={urlImage} alt=\"default preview\" />\n              </div>\n\n              <ConfirmModal\n                isOpenModal={isOpenModal}\n                setIsOpenModal={setIsOpenModal}\n                action={'delete_task'}\n                data={{ boardId, columnId, taskId, tasks }}\n              />\n            </div>\n\n            <p className={styles.description}>{description}</p>\n            {isOpenChangeTaskModal && (\n              <TaskChangeModal\n                task={task}\n                isOpenChangeTaskModal={isOpenChangeTaskModal}\n                setIsOpenChangeTaskModal={setIsOpenChangeTaskModal}\n                numberTask={index + 1}\n              />\n            )}\n          </div>\n        );\n      }}\n    </Draggable>\n  );\n});\n\nexport default Task;\n","// extracted by mini-css-extract-plugin\nexport default {\"column\":\"Column_column__x8ry+\",\"loader\":\"Column_loader__3Wqdp\",\"columnHead\":\"Column_columnHead__PcYBM\",\"titleColumnBlock\":\"Column_titleColumnBlock__Di3z8\",\"title\":\"Column_title__m22A8\",\"tasks\":\"Column_tasks__+O027\",\"delete\":\"Column_delete__eaGc6\",\"buttonCreate\":\"Column_buttonCreate__eNJEd\",\"title_form\":\"Column_title_form__XdOwj\",\"input\":\"Column_input__ZvEqY\",\"error\":\"Column_error__c6RUt\",\"buttons\":\"Column_buttons__kNsBK\",\"buttonCancel\":\"Column_buttonCancel__atjI2\",\"buttonSubmit\":\"Column_buttonSubmit__xKmds\"};","import React, { FC, useEffect, useState } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useTranslation } from 'react-i18next';\nimport { updateColumn } from '../../api/columns';\nimport { getTasks } from '../../api/tasks';\nimport { IColumn } from '../../models/IColumn';\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\nimport ConfirmModal from '../confirm-modal/ConfirmModal';\nimport TaskModal from '../task-modal/TaskModal';\nimport Task from '../task/Task';\nimport styles from './Column.module.scss';\nimport LoadingAnimation from '../loading-animation/LoadingAnimation';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport deleteIcon from './../../components/task/assets/delete.png';\nimport submitIcon from './assets/submit.png';\nimport cancelIcon from './assets/cancel.png';\nimport plus from './../header/assets/plus.png';\n\ninterface IProps {\n  column: IColumn;\n  index: number;\n}\n\nconst Columns: FC<IProps> = React.memo(({ column, index }) => {\n  const { title, id: columnId = '', order } = column;\n  const dispatch = useAppDispatch();\n  const { boardId, isLoading, columns } = useAppSelector((state) => state.columns);\n  const {\n    tasks,\n    isLoading: isLoadingTasks,\n    isCreateTask,\n    successUpload,\n  } = useAppSelector((state) => state.tasks);\n  const { t } = useTranslation();\n\n  const [isOpenConfirmationModal, setIsOpenConfirmationModal] = useState(false);\n  const [isOpenCreateTaskModal, setIsOpenCreateTaskModal] = useState(false);\n  const [isTitleInput, setIsTitleInput] = useState(false);\n\n  useEffect(() => {\n    dispatch(getTasks({ boardId, columnId }));\n  }, [columnId, successUpload]);\n\n  useEffect(() => {\n    setIsOpenCreateTaskModal(false);\n  }, [isCreateTask]);\n\n  return (\n    <Draggable draggableId={column.id as string} index={index}>\n      {(provided) => (\n        <div className={styles.column} {...provided.draggableProps} ref={provided.innerRef}>\n          {isLoadingTasks && (\n            <div className={styles.loader}>\n              <LoadingAnimation />\n            </div>\n          )}\n          <div className={styles.columnHead} {...provided.dragHandleProps}>\n            {isTitleInput ? (\n              <Formik\n                initialValues={{ title }}\n                onSubmit={({ title }, { resetForm }) => {\n                  dispatch(updateColumn({ boardId, columnId, data: { order, title } }));\n                  resetForm();\n                  setIsTitleInput(false);\n                }}\n                validationSchema={Yup.object().shape({\n                  title: Yup.string()\n                    .min(3, t('must_be_more_than_3_characters'))\n                    .max(12, t('must_be_less_than_12_characters'))\n                    .required(t('title_is_required')),\n                })}\n              >\n                {({ handleSubmit, handleBlur, isValid }) => {\n                  return (\n                    <Form\n                      className={styles.title_form}\n                      onSubmit={handleSubmit}\n                      onBlur={(e) => {\n                        handleBlur(e);\n                        if (isValid) {\n                          setTimeout(() => {\n                            setIsTitleInput(false);\n                          }, 100);\n                        }\n                      }}\n                    >\n                      <div className={styles.buttons}>\n                        <button className={styles.buttonSubmit} type=\"submit\" title={t('save')}>\n                          <img src={submitIcon} alt=\"submit button\" />\n                        </button>\n                        <button\n                          type=\"button\"\n                          title={t('cancel')}\n                          className={styles.buttonCancel}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            setIsTitleInput(false);\n                          }}\n                        >\n                          <img src={cancelIcon} alt=\"cancel button\" />\n                        </button>\n                      </div>\n                      <label htmlFor=\"title\">\n                        {t('title_column')}\n                        <Field id=\"title\" name=\"title\" className={styles.input} autoFocus={true} />\n                        <div className={styles.error}>\n                          <ErrorMessage name=\"title\" />\n                        </div>\n                      </label>\n                      {isLoading && <div className={styles.loader}>{<LoadingAnimation />}</div>}\n                    </Form>\n                  );\n                }}\n              </Formik>\n            ) : (\n              <div className={styles.titleColumnBlock}>\n                <h1\n                  className={styles.title}\n                  title={t('click_to_change')}\n                  onClick={() => setIsTitleInput(true)}\n                >\n                  {title}\n                </h1>\n                <div\n                  className={styles.delete}\n                  title={t('delete')}\n                  onClick={() => setIsOpenConfirmationModal(true)}\n                >\n                  <img src={deleteIcon} alt=\"delete icon\" />\n                </div>\n              </div>\n            )}\n            <ConfirmModal\n              isOpenModal={isOpenConfirmationModal}\n              setIsOpenModal={setIsOpenConfirmationModal}\n              data={{ columns, columnId, boardId }}\n              action={'delete_column'}\n            />\n          </div>\n\n          <Droppable droppableId={column.id as string}>\n            {(provided) => (\n              <div className={styles.tasks} {...provided.droppableProps} ref={provided.innerRef}>\n                {tasks[columnId] &&\n                  tasks[columnId].map((task, index) => {\n                    return <Task key={task.id} task={task} index={index} />;\n                  })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n\n          <button className={styles.buttonCreate} onClick={() => setIsOpenCreateTaskModal(true)}>\n            <img width={26} src={plus} alt=\"plus\" />\n            {t('create_task')}\n          </button>\n\n          <TaskModal\n            isOpenCreateTaskModal={isOpenCreateTaskModal}\n            setIsOpenCreateTaskModal={setIsOpenCreateTaskModal}\n            boardId={boardId}\n            columnId={columnId}\n          />\n        </div>\n      )}\n    </Draggable>\n  );\n});\n\nexport default Columns;\n","import React, { useEffect } from 'react';\nimport styles from './BoardPage.module.scss';\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\nimport { changeColumnsOrder, getColumns } from '../../api/columns';\nimport Column from '../../components/column/Column';\nimport { IColumn } from '../../models/IColumn';\nimport Header from '../../components/header/Header';\nimport { useTranslation } from 'react-i18next';\nimport LoadingAnimation from '../../components/loading-animation/LoadingAnimation';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { resetCreateNewColumn } from '../../store/columnsSlice';\nimport { resetCreateNewTask, resetUpdateTask } from '../../store/tasksSlice';\nimport { changeTasksOrderOneColumn, changeTasksOrderTwoColumns } from '../../api/tasks';\nimport { getBoards } from '../../api/boards';\n\nconst BoardPage = React.memo(() => {\n  const dispatch = useAppDispatch();\n  const { token } = useAppSelector((state) => state.auth);\n  const { boards } = useAppSelector((state) => state.boards);\n  const { isLoading, columns, boardId, errorColumn, isCreateColumn } = useAppSelector(\n    (state) => state.columns\n  );\n  const targetBoard = boards.find((el) => el.id === boardId);\n  const { isCreateTask, isUpdateTask, errorTask, tasks } = useAppSelector((state) => state.tasks);\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (!boards.length) {\n      dispatch(getBoards(token));\n    }\n  }, [boards.length]);\n\n  useEffect(() => {\n    dispatch(getColumns(boardId));\n  }, [boardId]);\n\n  useEffect(() => {\n    if (errorTask) {\n      toast.error(errorTask, {\n        position: 'top-center',\n        autoClose: 3000,\n        hideProgressBar: true,\n      });\n    }\n  }, [errorTask]);\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination, type } = result;\n\n    if (!destination) return;\n\n    const startIndex = source.index;\n    const endIndex = destination.index;\n\n    if (type === 'column') {\n      if (startIndex === endIndex) return;\n\n      dispatch(\n        changeColumnsOrder({ boardId, startIndex, endIndex, columns: columns as IColumn[] })\n      );\n      return;\n    }\n\n    //reordering in same list\n    if (source.droppableId === destination.droppableId) {\n      if (startIndex === endIndex) return;\n      const tasksOfColumn = tasks[source.droppableId];\n      const columnId = source.droppableId;\n      dispatch(\n        changeTasksOrderOneColumn({ boardId, columnId, startIndex, endIndex, tasksOfColumn })\n      );\n      return;\n    }\n\n    // moving between lists\n    const sourceColumn = tasks[source.droppableId];\n    const destinationColumn = tasks[destination.droppableId];\n    const destinationColumnId = destination.droppableId;\n\n    dispatch(\n      changeTasksOrderTwoColumns({\n        boardId,\n        sourceColumn,\n        destinationColumn,\n        startIndex,\n        endIndex,\n        destinationColumnId,\n      })\n    );\n  };\n\n  useEffect(() => {\n    if (isCreateColumn) {\n      toast.success(t('new_column_created'), {\n        position: 'top-center',\n        autoClose: 3000,\n        hideProgressBar: true,\n      });\n      dispatch(resetCreateNewColumn());\n    }\n    if (isCreateTask) {\n      toast.success(t('new_task_created'), {\n        position: 'top-center',\n        autoClose: 3000,\n        hideProgressBar: true,\n      });\n      dispatch(resetCreateNewTask());\n    }\n    if (isUpdateTask) {\n      toast.success(t('update_task'), {\n        position: 'top-center',\n        autoClose: 3000,\n        hideProgressBar: true,\n      });\n      dispatch(resetUpdateTask());\n    }\n    if (errorColumn !== 'Unauthorized' && errorColumn !== '') {\n      toast.error(errorColumn, {\n        position: 'top-center',\n        autoClose: 3000,\n        hideProgressBar: true,\n      });\n    }\n    if (errorTask !== 'Unauthorized' && errorTask !== '') {\n      toast.error(errorTask, {\n        position: 'top-center',\n        autoClose: 3000,\n        hideProgressBar: true,\n      });\n    }\n  }, [errorColumn, errorTask, isCreateColumn, isCreateTask, isUpdateTask]);\n\n  return (\n    <div className={styles.container}>\n      <Header />\n      <ToastContainer />\n      <h1 className={styles.title}>{targetBoard?.title}</h1>\n      <div className={styles.board}>\n        {isLoading && (\n          <div className={styles.loader}>\n            <LoadingAnimation />\n          </div>\n        )}\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"all-droppable\" direction=\"horizontal\" type=\"column\">\n            {(provided) => (\n              <div\n                className={styles.board__body}\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {!!columns.length ? (\n                  columns?.map((column: IColumn, index: number) => (\n                    <Column key={column.id} column={column} index={index} />\n                  ))\n                ) : (\n                  <h4>{t('columns_not_found')}</h4>\n                )}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    </div>\n  );\n});\n\nexport default BoardPage;\n"],"names":["isOpenCreateTaskModal","setIsOpenCreateTaskModal","boardId","columnId","dispatch","useAppDispatch","useAppSelector","state","tasks","isLoading","userId","jwtDecode","localStorage","getItem","t","useTranslation","className","cn","styles","onClick","e","stopPropagation","src","cross","alt","initialValues","title","description","onSubmit","resetForm","addTask","values","order","length","validationSchema","Yup","shape","min","max","required","handleSubmit","htmlFor","id","name","LoadingAnimation","type","disabled","supportedImageFormat","task","isOpenChangeTaskModal","setIsOpenChangeTaskModal","numberTask","urlImages","hasImage","files","urlImage","find","el","taskId","file","updateTask","data","fileUpload","test","img","size","includes","setFieldValue","as","width","upload","onChange","event","target","React","index","allTasks","isUpdateTask","useState","isOpenModal","setIsOpenModal","useEffect","fileDownload","fileName","filename","draggableId","provided","draggableProps","ref","innerRef","dragHandleProps","refactorIcon","deleteIcon","ConfirmModal","action","column","columns","isLoadingTasks","isCreateTask","successUpload","isOpenConfirmationModal","setIsOpenConfirmationModal","isTitleInput","setIsTitleInput","getTasks","updateColumn","handleBlur","isValid","onBlur","setTimeout","preventDefault","autoFocus","droppableId","droppableProps","map","placeholder","plus","token","auth","boards","errorColumn","isCreateColumn","targetBoard","errorTask","getBoards","getColumns","toast","position","autoClose","hideProgressBar","resetCreateNewColumn","resetCreateNewTask","resetUpdateTask","Header","onDragEnd","result","source","destination","startIndex","endIndex","sourceColumn","destinationColumn","destinationColumnId","changeTasksOrderTwoColumns","tasksOfColumn","changeTasksOrderOneColumn","changeColumnsOrder","direction","Column"],"sourceRoot":""}